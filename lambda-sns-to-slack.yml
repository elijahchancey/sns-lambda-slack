AWSTemplateFormatVersion: '2010-09-09'
Description: Forward SNS Messages to Slack
Outputs:
  SNSTopic:
    Value:
      Ref: Topic
Resources:
  Function:
    Properties:
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          from botocore.vendored import requests
          import json
          import re

          def lambda_handler(event, context):
              print('*****START EVENT*****')
              print(event)
              print('*****END EVENT*****')
              print('')
              
              sns_subject = event['Records'][0]['Sns']['Subject']
              print ('*****SNS_SUBJECT:*****')
              print (sns_subject)
              print ('')
              
              sns_message = event['Records'][0]['Sns']['Message']
              print ('*****SNS_MESSAGE:*****')
              print (sns_message)
              print ('')
              
              def send_rds_message():
                  print ('*****SENDING RDS MESSAGE*****')
                  # Convert sns_message to a string. In RDS Events, sns_message is a dict.
                  sns_message_string = json.dumps(sns_message, indent=4)
                  slack_message = {"text": "*RDS Event:* " + sns_message_string}
                  send_to_slack(slack_message)
                  return
                  
              def send_eb_message():
                  print ('*****SENDING EB MESSAGE*****')
                  # sns_message is a string in EB Events.
                  # The eb_message is the string between \nMessage:    and \n\nEnvironment
                  eb_message = re.search('\nMessage: (.*)\n\nEnvironment', sns_message).group(1)
                  eb_environment = re.search('\n\nEnvironment: (.*)\nApplication', sns_message).group(1)
                  slack_message = {"text": "*EB Event:* " + eb_environment + ": " + eb_message}
                  send_to_slack(slack_message)
                  return
                  
              def send_other_message():
                  print ('*****SENDING OTHER MESSAGE*****')
                  # Convert sns_message to a string. In Other Events, sns_message *should* be a dict.
                  slack_message = {"text": "*Other Event:* About to send an event which may not process correctly. Check the logs if it does not appear."}
                  send_to_slack(slack_message)
                  
                  sns_message_string = json.dumps(sns_message)
                  slack_message = {"text": "*Other Event:* " + sns_message_string}
                  send_to_slack(slack_message)
                  return
                  
              def send_to_slack(slack_message):
                  webhook_url = 'https://hooks.slack.com/services/xyz/xyz/123'
                  print (slack_message)
                  requests.post(webhook_url, data=json.dumps(slack_message), headers={'Content-Type': 'application/json'})
                  
              if "RDS Notification Message" in sns_subject:
                  send_rds_message()
              elif "AWS Elastic Beanstalk Notification" in sns_subject:
                  send_eb_message()    
              else:
                  send_other_message()
                  
              return
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'executionRole.Arn'
      Runtime: python3.6
    Type: AWS::Lambda::Function
  LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - Function
        - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: Topic
    Type: AWS::Lambda::Permission
  Topic:
    DependsOn:
    - Function
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - Function
          - Arn
        Protocol: lambda
    Type: AWS::SNS::Topic
  executionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicexecutionRole
      Path: /
    Type: AWS::IAM::Role
